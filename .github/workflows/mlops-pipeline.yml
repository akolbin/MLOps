name: MLOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      alert_email:
        description: 'Email for alerts (optional)'
        required: false
        type: string
      skip_infrastructure:
        description: 'Skip infrastructure deployment (use existing)'
        required: false
        type: boolean
        default: false

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'
  PYTHON_VERSION: '3.9'

jobs:
  # Infrastructure Planning and Deployment
  infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      id-token: write
      pull-requests: write  # For PR comments
    outputs:
      s3_bucket_name: ${{ steps.tf-outputs.outputs.s3_bucket_name }}
      endpoint_name: ${{ steps.tf-outputs.outputs.endpoint_name }}
      dashboard_url: ${{ steps.tf-outputs.outputs.dashboard_url }}
      infrastructure_changed: ${{ steps.tf-plan.outputs.exitcode == '2' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.3.1
      with:
        role-to-assume: arn:aws:iam::836072596305:role/GitHub_Actions_Runner
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform

    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan \
          -var="alert_email=${{ github.event.inputs.alert_email || '' }}" \
          -detailed-exitcode \
          -no-color \
          -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo "❌ Terraform Plan Failed!"
          exit 1
        elif [ $exitcode -eq 2 ]; then
          echo "📋 Infrastructure changes detected"
        else
          echo "✅ No infrastructure changes needed"
        fi
      working-directory: ./terraform

    - name: Comment PR with Plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('terraform/tfplan', 'utf8');
          const output = `## 🏗️ Terraform Plan
          
          <details><summary>Click to expand plan output</summary>
          
          \`\`\`terraform
          ${plan}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && (steps.tf-plan.outputs.exitcode == '2' || github.event.inputs.skip_infrastructure != 'true')
      run: |
        if [ "${{ steps.tf-plan.outputs.exitcode }}" == "2" ]; then
          echo "🚀 Applying infrastructure changes..."
          terraform apply -auto-approve tfplan
        else
          echo "ℹ️ No changes to apply, but ensuring outputs are available..."
        fi
      working-directory: ./terraform

    - name: Get Terraform Outputs
      id: tf-outputs
      run: |
        echo "s3_bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
        echo "endpoint_name=$(terraform output -raw sagemaker_endpoint_name)" >> $GITHUB_OUTPUT
        echo "dashboard_url=$(terraform output -raw cloudwatch_dashboard_url)" >> $GITHUB_OUTPUT
      working-directory: ./terraform

  # Data Generation and Model Training
  train-model:
    name: Train and Deploy Model
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      id-token: write
    needs: [infrastructure]
    if: github.ref == 'refs/heads/main'
    outputs:
      model_trained: ${{ steps.train.outputs.success }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.3.1
      with:
        role-to-assume: arn:aws:iam::836072596305:role/GitHub_Actions_Runner
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate Training Data
      run: python src/data/generate_data.py
      env:
        S3_BUCKET_NAME: ${{ needs.infrastructure.outputs.s3_bucket_name }}

    - name: Train Model
      id: train
      run: |
        echo "🤖 Training model..."
        python src/models/train.py
        echo "success=true" >> $GITHUB_OUTPUT
      env:
        S3_BUCKET_NAME: ${{ needs.infrastructure.outputs.s3_bucket_name }}

  # Wait for SageMaker Endpoint and Test
  test-endpoint:
    name: Test Model Endpoint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      id-token: write
    needs: [infrastructure, train-model]
    if: github.ref == 'refs/heads/main' && needs.train-model.outputs.model_trained == 'true'
    outputs:
      endpoint_ready: ${{ steps.test.outputs.success }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.3.1
      with:
        role-to-assume: arn:aws:iam::836072596305:role/GitHub_Actions_Runner
        aws-region: ${{ env.AWS_REGION }}

    - name: Wait for Endpoint Ready
      run: |
        echo "⏳ Waiting for SageMaker endpoint to be ready..."
        python -c "
        import boto3
        import time
        
        client = boto3.client('sagemaker')
        endpoint_name = '${{ needs.infrastructure.outputs.endpoint_name }}'
        
        print(f'Waiting for endpoint {endpoint_name} to be ready...')
        
        for i in range(30):  # Wait up to 15 minutes
            try:
                response = client.describe_endpoint(EndpointName=endpoint_name)
                status = response['EndpointStatus']
                print(f'Endpoint status: {status}')
                
                if status == 'InService':
                    print('✅ Endpoint is ready!')
                    break
                elif status == 'Failed':
                    raise Exception(f'❌ Endpoint failed: {response.get(\"FailureReason\", \"Unknown\")}')
                    
                time.sleep(30)
            except client.exceptions.ClientError as e:
                if 'does not exist' in str(e):
                    print('⏳ Endpoint not found yet, waiting...')
                    time.sleep(30)
                else:
                    raise e
        else:
            raise Exception('⏰ Timeout waiting for endpoint')
        "

    - name: Test Endpoint
      id: test
      run: |
        echo "🧪 Testing model endpoint..."
        python src/test_endpoint.py
        echo "success=true" >> $GITHUB_OUTPUT

  # MLOps Monitoring and Health Check
  monitoring:
    name: MLOps Monitoring
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      id-token: write
    needs: [infrastructure, test-endpoint]
    if: always() && needs.test-endpoint.outputs.endpoint_ready == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.3.1
      with:
        role-to-assume: arn:aws:iam::836072596305:role/GitHub_Actions_Runner
        aws-region: ${{ env.AWS_REGION }}

    - name: Run MLOps Monitoring
      run: |
        echo "📊 Running MLOps monitoring analysis..."
        python src/monitoring/mlops_monitor.py
      env:
        S3_BUCKET_NAME: ${{ needs.infrastructure.outputs.s3_bucket_name }}
        SAGEMAKER_ENDPOINT_NAME: ${{ needs.infrastructure.outputs.endpoint_name }}

  # Final Summary
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [infrastructure, train-model, test-endpoint, monitoring]
    if: always()
    
    steps:
    - name: Create Pipeline Summary
      run: |
        echo "# 🚀 MLOps Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Infrastructure
        if [ "${{ needs.infrastructure.result }}" == "success" ]; then
          echo "## ✅ Infrastructure" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: \`${{ needs.infrastructure.outputs.s3_bucket_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Endpoint**: \`${{ needs.infrastructure.outputs.endpoint_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Dashboard**: [${{ needs.infrastructure.outputs.dashboard_url }}](${{ needs.infrastructure.outputs.dashboard_url }})" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Infrastructure Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Model Training
        if [ "${{ needs.train-model.result }}" == "success" ]; then
          echo "## ✅ Model Training" >> $GITHUB_STEP_SUMMARY
          echo "- Data generated and uploaded to S3" >> $GITHUB_STEP_SUMMARY
          echo "- Model trained and artifacts saved" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.train-model.result }}" == "skipped" ]; then
          echo "## ⏭️ Model Training Skipped" >> $GITHUB_STEP_SUMMARY
          echo "- Only runs on main branch pushes" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Model Training Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Endpoint Testing
        if [ "${{ needs.test-endpoint.result }}" == "success" ]; then
          echo "## ✅ Endpoint Testing" >> $GITHUB_STEP_SUMMARY
          echo "- Endpoint is ready and responding" >> $GITHUB_STEP_SUMMARY
          echo "- Model inference working correctly" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.test-endpoint.result }}" == "skipped" ]; then
          echo "## ⏭️ Endpoint Testing Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Endpoint Testing Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Monitoring
        if [ "${{ needs.monitoring.result }}" == "success" ]; then
          echo "## ✅ MLOps Monitoring" >> $GITHUB_STEP_SUMMARY
          echo "- Health check completed" >> $GITHUB_STEP_SUMMARY
          echo "- Performance metrics collected" >> $GITHUB_STEP_SUMMARY
          echo "- Monitoring reports saved to S3" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.monitoring.result }}" == "skipped" ]; then
          echo "## ⏭️ Monitoring Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Monitoring Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor model performance via CloudWatch dashboard" >> $GITHUB_STEP_SUMMARY
        echo "- Check data capture files in S3 for drift analysis" >> $GITHUB_STEP_SUMMARY
        echo "- Review monitoring reports for insights" >> $GITHUB_STEP_SUMMARY